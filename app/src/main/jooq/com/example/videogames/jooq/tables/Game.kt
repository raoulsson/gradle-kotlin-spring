/*
 * This file is generated by jOOQ.
 */
package com.example.videogames.jooq.tables


import com.example.videogames.jooq.VideoGames
import com.example.videogames.jooq.keys.FK_GM_GEN
import com.example.videogames.jooq.keys.KEY_GAME_PRIMARY
import com.example.videogames.jooq.tables.records.GameRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Game(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GameRecord>?,
    aliased: Table<GameRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GameRecord>(
    alias,
    VideoGames.VIDEO_GAMES,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>video_games.game</code>
         */
        val GAME: Game = Game()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GameRecord> = GameRecord::class.java

    /**
     * The column <code>video_games.game.id</code>.
     */
    val ID: TableField<GameRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>video_games.game.genre_id</code>.
     */
    val GENRE_ID: TableField<GameRecord, Int?> = createField(DSL.name("genre_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>video_games.game.game_name</code>.
     */
    val GAME_NAME: TableField<GameRecord, String?> = createField(DSL.name("game_name"), SQLDataType.VARCHAR(200).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<GameRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GameRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>video_games.game</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>video_games.game</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>video_games.game</code> table reference
     */
    constructor(): this(DSL.name("game"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GameRecord>): this(Internal.createPathAlias(child, key), child, key, GAME, null)
    override fun getSchema(): Schema? = if (aliased()) null else VideoGames.VIDEO_GAMES
    override fun getIdentity(): Identity<GameRecord, Int?> = super.getIdentity() as Identity<GameRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<GameRecord> = KEY_GAME_PRIMARY
    override fun getReferences(): List<ForeignKey<GameRecord, *>> = listOf(FK_GM_GEN)

    private lateinit var _genre: Genre

    /**
     * Get the implicit join path to the <code>video_games.genre</code> table.
     */
    fun genre(): Genre {
        if (!this::_genre.isInitialized)
            _genre = Genre(this, FK_GM_GEN)

        return _genre;
    }

    val genre: Genre
        get(): Genre = genre()
    override fun `as`(alias: String): Game = Game(DSL.name(alias), this)
    override fun `as`(alias: Name): Game = Game(alias, this)
    override fun `as`(alias: Table<*>): Game = Game(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Game = Game(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Game = Game(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Game = Game(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, String?> = super.fieldsRow() as Row3<Int?, Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
