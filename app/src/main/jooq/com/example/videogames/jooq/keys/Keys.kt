/*
 * This file is generated by jOOQ.
 */
package com.example.videogames.jooq.keys


import com.example.videogames.jooq.tables.FlywaySchemaHistory
import com.example.videogames.jooq.tables.Game
import com.example.videogames.jooq.tables.GamePlatform
import com.example.videogames.jooq.tables.GamePublisher
import com.example.videogames.jooq.tables.Genre
import com.example.videogames.jooq.tables.Platform
import com.example.videogames.jooq.tables.Publisher
import com.example.videogames.jooq.tables.Region
import com.example.videogames.jooq.tables.RegionSales
import com.example.videogames.jooq.tables.records.FlywaySchemaHistoryRecord
import com.example.videogames.jooq.tables.records.GamePlatformRecord
import com.example.videogames.jooq.tables.records.GamePublisherRecord
import com.example.videogames.jooq.tables.records.GameRecord
import com.example.videogames.jooq.tables.records.GenreRecord
import com.example.videogames.jooq.tables.records.PlatformRecord
import com.example.videogames.jooq.tables.records.PublisherRecord
import com.example.videogames.jooq.tables.records.RegionRecord
import com.example.videogames.jooq.tables.records.RegionSalesRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val KEY_FLYWAY_SCHEMA_HISTORY_PRIMARY: UniqueKey<FlywaySchemaHistoryRecord> = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("KEY_flyway_schema_history_PRIMARY"), arrayOf(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK), true)
val KEY_GAME_PRIMARY: UniqueKey<GameRecord> = Internal.createUniqueKey(Game.GAME, DSL.name("KEY_game_PRIMARY"), arrayOf(Game.GAME.ID), true)
val KEY_GAME_PLATFORM_PRIMARY: UniqueKey<GamePlatformRecord> = Internal.createUniqueKey(GamePlatform.GAME_PLATFORM, DSL.name("KEY_game_platform_PRIMARY"), arrayOf(GamePlatform.GAME_PLATFORM.ID), true)
val KEY_GAME_PUBLISHER_PRIMARY: UniqueKey<GamePublisherRecord> = Internal.createUniqueKey(GamePublisher.GAME_PUBLISHER, DSL.name("KEY_game_publisher_PRIMARY"), arrayOf(GamePublisher.GAME_PUBLISHER.ID), true)
val KEY_GENRE_PRIMARY: UniqueKey<GenreRecord> = Internal.createUniqueKey(Genre.GENRE, DSL.name("KEY_genre_PRIMARY"), arrayOf(Genre.GENRE.ID), true)
val KEY_PLATFORM_PRIMARY: UniqueKey<PlatformRecord> = Internal.createUniqueKey(Platform.PLATFORM, DSL.name("KEY_platform_PRIMARY"), arrayOf(Platform.PLATFORM.ID), true)
val KEY_PUBLISHER_PRIMARY: UniqueKey<PublisherRecord> = Internal.createUniqueKey(Publisher.PUBLISHER, DSL.name("KEY_publisher_PRIMARY"), arrayOf(Publisher.PUBLISHER.ID), true)
val KEY_REGION_PRIMARY: UniqueKey<RegionRecord> = Internal.createUniqueKey(Region.REGION, DSL.name("KEY_region_PRIMARY"), arrayOf(Region.REGION.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val FK_GM_GEN: ForeignKey<GameRecord, GenreRecord> = Internal.createForeignKey(Game.GAME, DSL.name("fk_gm_gen"), arrayOf(Game.GAME.GENRE_ID), com.example.videogames.jooq.keys.KEY_GENRE_PRIMARY, arrayOf(Genre.GENRE.ID), true)
val FK_GPL_GP: ForeignKey<GamePlatformRecord, GamePublisherRecord> = Internal.createForeignKey(GamePlatform.GAME_PLATFORM, DSL.name("fk_gpl_gp"), arrayOf(GamePlatform.GAME_PLATFORM.GAME_PUBLISHER_ID), com.example.videogames.jooq.keys.KEY_GAME_PUBLISHER_PRIMARY, arrayOf(GamePublisher.GAME_PUBLISHER.ID), true)
val FK_GPL_PLA: ForeignKey<GamePlatformRecord, PlatformRecord> = Internal.createForeignKey(GamePlatform.GAME_PLATFORM, DSL.name("fk_gpl_pla"), arrayOf(GamePlatform.GAME_PLATFORM.PLATFORM_ID), com.example.videogames.jooq.keys.KEY_PLATFORM_PRIMARY, arrayOf(Platform.PLATFORM.ID), true)
val FK_GPU_GAM: ForeignKey<GamePublisherRecord, GameRecord> = Internal.createForeignKey(GamePublisher.GAME_PUBLISHER, DSL.name("fk_gpu_gam"), arrayOf(GamePublisher.GAME_PUBLISHER.GAME_ID), com.example.videogames.jooq.keys.KEY_GAME_PRIMARY, arrayOf(Game.GAME.ID), true)
val FK_GPU_PUB: ForeignKey<GamePublisherRecord, PublisherRecord> = Internal.createForeignKey(GamePublisher.GAME_PUBLISHER, DSL.name("fk_gpu_pub"), arrayOf(GamePublisher.GAME_PUBLISHER.PUBLISHER_ID), com.example.videogames.jooq.keys.KEY_PUBLISHER_PRIMARY, arrayOf(Publisher.PUBLISHER.ID), true)
val FK_RS_GP: ForeignKey<RegionSalesRecord, GamePlatformRecord> = Internal.createForeignKey(RegionSales.REGION_SALES, DSL.name("fk_rs_gp"), arrayOf(RegionSales.REGION_SALES.GAME_PLATFORM_ID), com.example.videogames.jooq.keys.KEY_GAME_PLATFORM_PRIMARY, arrayOf(GamePlatform.GAME_PLATFORM.ID), true)
val FK_RS_REG: ForeignKey<RegionSalesRecord, RegionRecord> = Internal.createForeignKey(RegionSales.REGION_SALES, DSL.name("fk_rs_reg"), arrayOf(RegionSales.REGION_SALES.REGION_ID), com.example.videogames.jooq.keys.KEY_REGION_PRIMARY, arrayOf(Region.REGION.ID), true)
