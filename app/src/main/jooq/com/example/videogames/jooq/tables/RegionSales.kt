/*
 * This file is generated by jOOQ.
 */
package com.example.videogames.jooq.tables


import com.example.videogames.jooq.VideoGames
import com.example.videogames.jooq.keys.FK_RS_GP
import com.example.videogames.jooq.keys.FK_RS_REG
import com.example.videogames.jooq.tables.records.RegionSalesRecord

import java.math.BigDecimal
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RegionSales(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RegionSalesRecord>?,
    aliased: Table<RegionSalesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RegionSalesRecord>(
    alias,
    VideoGames.VIDEO_GAMES,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>video_games.region_sales</code>
         */
        val REGION_SALES: RegionSales = RegionSales()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RegionSalesRecord> = RegionSalesRecord::class.java

    /**
     * The column <code>video_games.region_sales.region_id</code>.
     */
    val REGION_ID: TableField<RegionSalesRecord, Int?> = createField(DSL.name("region_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>video_games.region_sales.game_platform_id</code>.
     */
    val GAME_PLATFORM_ID: TableField<RegionSalesRecord, Int?> = createField(DSL.name("game_platform_id"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>video_games.region_sales.num_sales</code>.
     */
    val NUM_SALES: TableField<RegionSalesRecord, BigDecimal?> = createField(DSL.name("num_sales"), SQLDataType.DECIMAL(5, 2).defaultValue(DSL.inline("NULL", SQLDataType.DECIMAL)), this, "")

    private constructor(alias: Name, aliased: Table<RegionSalesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RegionSalesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>video_games.region_sales</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>video_games.region_sales</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>video_games.region_sales</code> table reference
     */
    constructor(): this(DSL.name("region_sales"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RegionSalesRecord>): this(Internal.createPathAlias(child, key), child, key, REGION_SALES, null)
    override fun getSchema(): Schema? = if (aliased()) null else VideoGames.VIDEO_GAMES
    override fun getReferences(): List<ForeignKey<RegionSalesRecord, *>> = listOf(FK_RS_REG, FK_RS_GP)

    private lateinit var _region: Region
    private lateinit var _gamePlatform: GamePlatform

    /**
     * Get the implicit join path to the <code>video_games.region</code> table.
     */
    fun region(): Region {
        if (!this::_region.isInitialized)
            _region = Region(this, FK_RS_REG)

        return _region;
    }

    val region: Region
        get(): Region = region()

    /**
     * Get the implicit join path to the <code>video_games.game_platform</code>
     * table.
     */
    fun gamePlatform(): GamePlatform {
        if (!this::_gamePlatform.isInitialized)
            _gamePlatform = GamePlatform(this, FK_RS_GP)

        return _gamePlatform;
    }

    val gamePlatform: GamePlatform
        get(): GamePlatform = gamePlatform()
    override fun `as`(alias: String): RegionSales = RegionSales(DSL.name(alias), this)
    override fun `as`(alias: Name): RegionSales = RegionSales(alias, this)
    override fun `as`(alias: Table<*>): RegionSales = RegionSales(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RegionSales = RegionSales(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RegionSales = RegionSales(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RegionSales = RegionSales(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, Int?, BigDecimal?> = super.fieldsRow() as Row3<Int?, Int?, BigDecimal?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, BigDecimal?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, BigDecimal?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
