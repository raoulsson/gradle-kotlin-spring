/*
 * This file is generated by jOOQ.
 */
package com.example.videogames.jooq.tables.records


import com.example.videogames.jooq.tables.Genre

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GenreRecord() : UpdatableRecordImpl<GenreRecord>(Genre.GENRE), Record2<Int?, String?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var genreName: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>
    override fun valuesRow(): Row2<Int?, String?> = super.valuesRow() as Row2<Int?, String?>
    override fun field1(): Field<Int?> = Genre.GENRE.ID
    override fun field2(): Field<String?> = Genre.GENRE.GENRE_NAME
    override fun component1(): Int? = id
    override fun component2(): String? = genreName
    override fun value1(): Int? = id
    override fun value2(): String? = genreName

    override fun value1(value: Int?): GenreRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): GenreRecord {
        this.genreName = value
        return this
    }

    override fun values(value1: Int?, value2: String?): GenreRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised GenreRecord
     */
    constructor(id: Int? = null, genreName: String? = null): this() {
        this.id = id
        this.genreName = genreName
    }
}
